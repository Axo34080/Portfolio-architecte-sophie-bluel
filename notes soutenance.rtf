{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1036{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset238 Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang12 I.Commencez par pr\'e9senter comment vous filtrez et affichez les projets dans la galerie\par
\par
Ce code JavaScript est utilis\'e9 pour afficher une galerie d'\f1\u339?uvres sur une page web. Il utilise l'API Fetch pour r\f0\'e9cup\'e9rer les donn\'e9es des \f1\u339?uvres et des cat\f0\'e9gories \'e0 partir d'un serveur local.\par
\par
1. R\'e9cup\'e9ration des \'e9l\'e9ments du DOM : Les premi\'e8res lignes du code r\'e9cup\'e8rent divers \'e9l\'e9ments du DOM qui seront utilis\'e9s plus tard dans le script. Par exemple, `gallery` est l'\'e9l\'e9ment du DOM o\'f9 les \f1\u339?uvres seront affich\f0\'e9es.\par
\par
2. R\'e9cup\'e9ration des donn\'e9es de l'API : Les fonctions `getWorks` et `getCategory` sont des fonctions asynchrones qui utilisent l'API Fetch pour r\'e9cup\'e9rer les donn\'e9es des \f1\u339?uvres et des cat\f0\'e9gories \'e0 partir d'un serveur local.\par
\par
3. Affichage des \f1\u339?uvres : La fonction `displayWorksGallery` est utilis\f0\'e9e pour afficher les \f1\u339?uvres dans la galerie. Elle appelle d'abord `getWorks` pour r\f0\'e9cup\'e9rer les donn\'e9es des \f1\u339?uvres, puis elle utilise une boucle `forEach` pour cr\f0\'e9er et ajouter un nouvel \'e9l\'e9ment `figure` pour chaque \f1\u339?uvre \f0\'e0 l'\'e9l\'e9ment `gallery`. Chaque `figure` contient une image (l'URL de l'image est r\'e9cup\'e9r\'e9e \'e0 partir des donn\'e9es de l'\f1\u339?uvre) et une l\f0\'e9gende avec le titre de l'\f1\u339?uvre.\par
\par
4. Cr\f0\'e9ation des boutons de cat\'e9gorie : La fonction `createAllButtons` est utilis\'e9e pour cr\'e9er des boutons pour chaque cat\'e9gorie. Elle appelle d'abord `getCategory` pour r\'e9cup\'e9rer les donn\'e9es des cat\'e9gories, puis elle utilise une boucle `forEach` pour cr\'e9er un nouveau bouton pour chaque cat\'e9gorie.\par
\par
5. **Ex\'e9cution du script** : Enfin, la fonction `main` est appel\'e9e pour ex\'e9cuter le script. Elle appelle les fonctions `displayWorksGallery` et `createAllButtons` pour afficher les \f1\u339?uvres et cr\f0\'e9er les boutons de cat\'e9gorie.\par
\par
\par
II. Ensuite, pr\'e9sentez comment vous avez mis en place le syst\'e8me de connexion.\par
\par
Ce code JavaScript est utilis\'e9 pour mettre en place un syst\'e8me de connexion sur une page web. Il utilise l'API Fetch pour envoyer une requ\'eate POST \'e0 un serveur local avec les informations de connexion de l'utilisateur.\par
\par
1. **R\'e9cup\'e9ration des informations de connexion** : Lorsque le formulaire de connexion est soumis, un gestionnaire d'\'e9v\'e9nements est d\'e9clench\'e9 qui emp\'eache l'action par d\'e9faut du formulaire (qui est de recharger la page), r\'e9cup\'e8re l'email et le mot de passe entr\'e9s par l'utilisateur, et efface tout message d'erreur pr\'e9c\'e9dent.\par
\par
2. **Validation de l'email et du mot de passe** : Avant d'envoyer la requ\'eate, le code v\'e9rifie que l'email et le mot de passe sont valides en utilisant les fonctions `validateEmail` et `validatePassword`. Si l'une de ces fonctions renvoie `false`, un message d'erreur est affich\'e9 et la fonction retourne imm\'e9diatement pour emp\'eacher l'envoi de la requ\'eate.\par
\par
3. **Envoi de la requ\'eate POST** : Si l'email et le mot de passe sont valides, le code cr\'e9e un objet `login` avec ces informations, le convertit en une cha\'eene JSON, et l'envoie \'e0 l'API de connexion du serveur en utilisant l'API Fetch.\par
\par
4. **Gestion de la r\'e9ponse du serveur** : Si la r\'e9ponse du serveur n'est pas OK (c'est-\'e0-dire si le statut de la r\'e9ponse n'est pas 200), le code affiche un message d'erreur et jette une erreur. Si la r\'e9ponse est OK, le code r\'e9cup\'e8re le JSON de la r\'e9ponse, qui contient l'ID de l'utilisateur et le token d'authentification.\par
\par
5. **Stockage des informations de l'utilisateur** : Une fois que le JSON de la r\'e9ponse a \'e9t\'e9 r\'e9cup\'e9r\'e9, le code stocke l'ID de l'utilisateur et le token d'authentification dans le sessionStorage du navigateur, puis redirige l'utilisateur vers la page d'accueil.\par
\par
6. **Gestion des erreurs** : Si une erreur se produit \'e0 tout moment pendant ce processus, le code l'affiche dans la console.\par
\par
\par
III.Finalement, vous montrez le fonctionnement de l\rquote ajout de travaux \'e0 la galerie.\par
\par
Ce code JavaScript est utilis\'e9 pour ajouter de nouveaux travaux \'e0 la galerie sur une page web. Il utilise l'API Fetch pour envoyer une requ\'eate POST \'e0 un serveur local avec les informations du nouveau travail.\par
\par
1. **Validation du fichier image** : La fonction `validateImageFile` v\'e9rifie que l'extension du fichier est jpg, jpeg, png ou gif. Si le fichier n'est pas une image ou n'a pas \'e9t\'e9 s\'e9lectionn\'e9, un message d'erreur est affich\'e9 et la fonction `addWorks` retourne imm\'e9diatement pour emp\'eacher l'envoi de la requ\'eate.\par
\par
2. **Ajout du travail \'e0 la galerie** : La fonction `addWorkToGallery` ajoute le nouveau travail \'e0 un tableau local, cr\'e9e un nouvel \'e9l\'e9ment DOM pour le travail, ajoute l'image du travail \'e0 l'\'e9l\'e9ment, et ajoute l'\'e9l\'e9ment \'e0 la galerie.\par
\par
3. **Envoi de la requ\'eate POST** : La fonction `addWorks` est d\'e9clench\'e9e lorsque le formulaire d'ajout de travail est soumis. Elle emp\'eache l'action par d\'e9faut du formulaire (qui est de recharger la page), r\'e9cup\'e8re les informations du nouveau travail entr\'e9es par l'utilisateur, et envoie une requ\'eate POST au serveur avec ces informations. Si la requ\'eate est r\'e9ussie, elle ajoute le nouveau travail \'e0 la galerie, r\'e9initialise le formulaire, et affiche la modale du portfolio. Si la requ\'eate \'e9choue, elle affiche un message d'erreur.\par
\par
\par
\par
\par

\pard\sa200\sl276\slmult1\qc\ul\b\fs40 Questions\par
\par
\par

\pard\sa200\sl276\slmult1\b0\fs22 1.le fonctionnement des appels \'e0 l\rquote API et comment sont r\'e9cup\'e9r\'e9es les donn\'e9es ;\par
\ulnone Les appels \'e0 l'API sont des requ\'eates faites \'e0 un serveur distant pour obtenir des donn\'e9es ou effectuer des actions. Voici comment cela fonctionne :\par
\par
Requ\'eate HTTP : L'application envoie une requ\'eate HTTP \'e0 l'URL de l'API avec des param\'e8tres sp\'e9cifiques d\'e9crivant ce qu'elle veut (par exemple, des donn\'e9es, des actions \'e0 effectuer).\par
\par
Traitement de la requ\'eate : Le serveur de l'API re\'e7oit la requ\'eate, la traite et identifie l'action demand\'e9e.\par
\par
Traitement de l'action : Le serveur effectue l'action demand\'e9e (par exemple, r\'e9cup\'e9rer des donn\'e9es depuis une base de donn\'e9es, effectuer des calculs, etc.).\par
\par
R\'e9ponse HTTP : Une fois l'action termin\'e9e, le serveur renvoie une r\'e9ponse HTTP \'e0 l'application. Cette r\'e9ponse contient g\'e9n\'e9ralement les donn\'e9es demand\'e9es ou un message indiquant le succ\'e8s ou l'\'e9chec de l'action.\par
\par
Traitement de la r\'e9ponse : L'application re\'e7oit la r\'e9ponse HTTP et traite les donn\'e9es re\'e7ues, puis les affiche \'e0 l'utilisateur ou effectue d'autres actions en cons\'e9quence.\par
\par
En r\'e9sum\'e9, les appels \'e0 l'API permettent \'e0 une application d'interagir avec des services externes pour obtenir des donn\'e9es ou effectuer des actions, en utilisant le protocole HTTP pour la communication et les r\'e9ponses.\par
\par
\ul 2.gestion de la connexion de l\rquote utilisateur et la diff\'e9rence entre un utilisateur connect\'e9 et non connect\'e9 ;\par
\ulnone Dans ce code, la connexion de l'utilisateur est g\'e9r\'e9e par le stockage local du navigateur (localStorage).\par
\par
Connexion de l'utilisateur : Lorsqu'un utilisateur se connecte, ses informations d'identification sont envoy\'e9es au serveur via une requ\'eate POST. Si les informations d'identification sont correctes, le serveur renvoie un token d'authentification. Ce token est ensuite stock\'e9 dans le localStorage du navigateur.\par
\par
V\'e9rification de la connexion de l'utilisateur : \'c0 chaque chargement de la page, le code v\'e9rifie si un token d'authentification est pr\'e9sent dans le localStorage. Si un token est pr\'e9sent, cela signifie que l'utilisateur est connect\'e9. Sinon, l'utilisateur n'est pas connect\'e9.\par
\par
Diff\'e9rence entre un utilisateur connect\'e9 et non connect\'e9 : Si un utilisateur est connect\'e9, il a acc\'e8s \'e0 des fonctionnalit\'e9s suppl\'e9mentaires, comme l'ajout et la suppression de travaux dans la galerie. Ces fonctionnalit\'e9s ne sont pas disponibles pour un utilisateur non connect\'e9. De plus, certaines requ\'eates \'e0 l'API, comme la requ\'eate DELETE pour supprimer un travail, n\'e9cessitent le token d'authentification de l'utilisateur, qui n'est disponible que si l'utilisateur est connect\'e9.\ul\par
3.le fonctionnement du filtre des projets dans la galerie ;\par
\ulnone Le filtre des projets dans la galerie fonctionne en utilisant les cat\'e9gories de chaque projet. Voici comment cela fonctionne :\par
\par
R\'e9cup\'e9ration des cat\'e9gories : Les cat\'e9gories sont r\'e9cup\'e9r\'e9es \'e0 partir du serveur via une requ\'eate API. Chaque cat\'e9gorie est ensuite ajout\'e9e comme une option dans le menu d\'e9roulant de filtre.\par
\par
Application du filtre : Lorsqu'une cat\'e9gorie est s\'e9lectionn\'e9e dans le menu d\'e9roulant, un \'e9v\'e9nement est d\'e9clench\'e9. Cet \'e9v\'e9nement r\'e9cup\'e8re la valeur de la cat\'e9gorie s\'e9lectionn\'e9e.\par
\par
Affichage des projets filtr\'e9s : En utilisant la valeur de la cat\'e9gorie s\'e9lectionn\'e9e, le code parcourt tous les projets dans la galerie. Si la cat\'e9gorie d'un projet correspond \'e0 la cat\'e9gorie s\'e9lectionn\'e9e, ce projet est affich\'e9. Si ce n'est pas le cas, le projet est cach\'e9.\par
\par
R\'e9initialisation du filtre : Si l'option "Tous" est s\'e9lectionn\'e9e dans le menu d\'e9roulant, tous les projets sont affich\'e9s, ind\'e9pendamment de leur cat\'e9gorie.\par
\par
Cela permet \'e0 l'utilisateur de filtrer les projets dans la galerie en fonction de leur cat\'e9gorie, ce qui facilite la recherche de projets sp\'e9cifiques.\ul\par
4.l'envoi de nouvelles images \'e0 l'API. \par
\ulnone Dans votre code, l'envoi de nouvelles images \'e0 l'API est g\'e9r\'e9 de la mani\'e8re suivante :\par
\par
R\'e9cup\'e9ration de l'image : Lorsque le formulaire est soumis, vous cr\'e9ez un nouvel objet FormData \'e0 partir du formulaire (new FormData(formAddWorks)). Vous r\'e9cup\'e9rez ensuite le fichier image du formulaire avec formData.get('image').\par
\par
Validation de l'image : Vous v\'e9rifiez que le fichier est bien une image avec la fonction validateImageFile(file). Si le fichier n'est pas une image ou n'a pas \'e9t\'e9 s\'e9lectionn\'e9, un message d'erreur est affich\'e9 et la fonction addWorks retourne imm\'e9diatement pour emp\'eacher l'envoi de la requ\'eate.\par
\par
Envoi de l'image \'e0 l'API : Vous envoyez une requ\'eate POST \'e0 l'API avec fetch("http://localhost:5678/api/works", \{...\}). Dans les options de la requ\'eate, vous d\'e9finissez la m\'e9thode sur "POST", le corps sur formData (qui contient l'image), et vous ajoutez un en-t\'eate d'autorisation avec le token d'authentification de l'utilisateur.\par
\par
Gestion de la r\'e9ponse de l'API : Si la requ\'eate est r\'e9ussie, vous ajoutez le nouveau travail \'e0 la galerie avec addWorkToGallery(data), r\'e9initialisez le formulaire avec formAddWorks.reset(), et affichez la modale du portfolio. Si la requ\'eate \'e9choue, vous affichez un message d'erreur dans la console.\par
\par
Ainsi, votre code g\'e8re l'envoi de nouvelles images \'e0 l'API en r\'e9cup\'e9rant l'image du formulaire, en la validant, en l'envoyant \'e0 l'API avec une requ\'eate POST, et en g\'e9rant la r\'e9ponse de l'API.\par
}
 